generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  Experience
  Organizer
}

model User {
  id             Int      @id @default(autoincrement())
  firstName      String
  lastName       String
  email          String   @unique
  password       String
  phone          String
  userType       Role
  referralCode   String?
  points         Int      @default(0)
  userUniqueCode String?  @unique
  isActive       Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  events         Event[]       @relation("OrganizedEvents")
  tickets        Ticket[]      @relation("UserTickets")
  transactions   Transaction[]
  reviews        Review[]
  referralsOwned Referral[]    @relation("Referrer")
  referralsUsed  Referral[]    @relation("Referred")
  Points         Points[]
  Discount       Discount[]
}

enum IsPaidEvent {
  Free
  Paid
}

enum Category {
  SINGLEBAND
  GROUPBAND
  DISC_JORKEY
}

model Event {
  id             Int         @id @default(autoincrement())
  organizerId    Int
  name           String
  price          Float       @default(0.0)
  eventDate      DateTime
  eventTime      DateTime
  sellEndDate    DateTime
  sellEndTime    DateTime
  location       String
  description    String
  image          String
  availableSeats Int
  isPaidEvent    IsPaidEvent
  category       Category
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relations
  organizer   User          @relation("OrganizedEvents", fields: [organizerId], references: [id])
  tickets     Ticket[]      @relation("EventTickets")
  promotions  Promotion[]
  reviews     Review[]
  Transaction Transaction[]
  Feedback    Feedback[]
}

enum Status {
  Active
  Expired
  Cancelled
}

model Ticket {
  id                 Int      @id @default(autoincrement())
  eventId            Int
  userId             Int
  purchaseDate       DateTime @default(now())
  quantity           Int
  price              Float
  totalPrice         Float
  status             Status   @default(Active)
  discountCode       String?
  discountAmount     Float?
  seatNumber         String?
  section            String?
  paymentMethod      String?
  cancellationReason String?

  // Relations
  event Event @relation("EventTickets", fields: [eventId], references: [id])
  user  User  @relation("UserTickets", fields: [userId], references: [id])
}

model Review {
  id         Int      @id @default(autoincrement())
  eventId    Int
  userId     Int
  rating     Int
  reviewText String?
  createdAt  DateTime @default(now())

  // Relations
  event Event @relation(fields: [eventId], references: [id])
  user  User  @relation(fields: [userId], references: [id])
}

model Promotion {
  id             Int      @id @default(autoincrement())
  eventId        Int
  discountCode   String   @unique
  amount         Float
  quotaAvailable Int
  quotaUsed      Int
  validUntil     DateTime
  createdAt      DateTime @default(now())

  // Relations
  event Event @relation(fields: [eventId], references: [id])
}

model Discount {
  id              Int      @id @default(autoincrement())
  userId          Int
  discountVoucher Float    @default(0)
  voucherCode     String   @unique
  validUntil      DateTime
  createdAt       DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])
}

model Transaction {
  id              Int      @id @default(autoincrement())
  userId          Int
  eventId         Int
  amount          Float
  transactionDate DateTime @default(now())
  status          String   @default("Success")

  // Relations
  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])
}

model Referral {
  id            Int       @id @default(autoincrement())
  referrerId    Int
  referredId    Int
  pointsAwarded Int       @default(0)
  expiresAt     DateTime?
  usedAt        DateTime  @default(now())
  expired       Boolean   @default(false)

  // Relations
  referrer User @relation("Referrer", fields: [referrerId], references: [id])
  referred User @relation("Referred", fields: [referredId], references: [id])
}

model Points {
  id        Int      @id @default(autoincrement())
  userId    Int
  points    Int      @default(0)
  expiresAt DateTime
  createdAt DateTime @default(now())
  expired   Boolean  @default(false)

  user User @relation(fields: [userId], references: [id])
}

model Feedback {
  id        Int      @id @default(autoincrement())
  message   String
  createdAt DateTime @default(now())
  eventId   Int

  //relation
  event Event @relation(fields: [eventId], references: [id])
}
